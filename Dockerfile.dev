# Dockerfile.dev

# syntax = docker/dockerfile:1

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version and Gemfile
ARG RUBY_VERSION=3.2.6
FROM registry.docker.com/library/ruby:$RUBY_VERSION-slim as base

# Rails app lives here
WORKDIR /rails

# Set development environment
ENV RAILS_ENV="development" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="" \
    # uses multithreading to install dependencies faster
    BUNDLE_JOBS="$(nproc)" \
    # helps with random network failures (attempts to install)
    BUNDLE_RETRY=3

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to build gems and for development
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libpq-dev libvips pkg-config

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git

# Copy application code
COPY . .

# Precompile bootsnap cache
RUN bundle exec bootsnap precompile --gemfile app/ lib/

# Final stage for app image
FROM base

# Install packages needed for development and runtime
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libvips postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built artifacts: gems, application
COPY --from=build /usr/local/bundle /usr/local/bundle
COPY --from=build /rails /rails

# For development, we'll run as the host user to avoid permission issues
# RUN useradd rails --create-home --shell /bin/bash && \
#     chown -R rails:rails db log storage tmp public/uploads
# USER rails:rails

# Expose port 3000 to the host
EXPOSE 3000

# Start the Rails server in development mode
CMD ["./bin/rails", "server", "-b", "0.0.0.0"]

